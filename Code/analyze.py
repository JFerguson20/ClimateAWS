import csv
import rpy2.robjects as robjects
import rpy2.robjects.lib.ggplot2 as ggplot2
from rpy2.robjects.packages import importr
from rpy2.robjects.vectors import DataFrame, StrVector

##### Import stuff for R
stats = importr('stats')
base = importr('base')
grdevices = importr('grDevices')
r = robjects.r

##### Do least squares analyisis for the year data
temps = [] 
years = []
#Open the csv that was generated by PIG
#Fields are years, tempatures
with open('Data/1950SumYear.csv', 'rb') as f:
	reader = csv.reader(f, delimiter=',') 
    # for each line get the year and the tempature and append to end of years
    # and temps list
	for line in reader:
		years.append(int(line[0]))
		temps.append(float(line[1]))
f.close()

#for R, create the variables year and temp equal to the lists of years and
#temps converted to vectors
robjects.globalenv['year'] = robjects.IntVector(years)
robjects.globalenv['temp'] = robjects.FloatVector(temps)
dataf = robjects.DataFrame({'year':  robjects.IntVector(years), 'temp': robjects.FloatVector(temps)})

#create the picture we want to plot too.
grdevices.png('1950YearPlot.png', width=1000, height=600, bg="white")

#Plot data
#Label axis
#Add in best fit curves
pp = ggplot2.ggplot(dataf) + \
     ggplot2.aes_string(x='year', y='temp') + \
     ggplot2.geom_point() + \
     ggplot2.stat_smooth(color = 'blue',method = 'loess', size = 2) + \
     ggplot2.stat_smooth(color = 'red', method = 'lm', se =r("FALSE"), size =2)
  
#plot everything above onto the picture
pp.plot()
grdevices.dev_off()

##### Do least squares analyisis for the month data
#Same thing as above but with with the additional list of months
temps = []
years = []
months = []
#Open the csv file with the month data from PIG
#Fields are years, months, tempatures
with open('Data/1950SumMonth.csv', 'rb') as f:
	reader = csv.reader(f, delimiter=',')
    #append the values into the list
	for line in reader:
		years.append(int(line[0]))
		months.append(int(line[1]))
		temps.append(float(line[2]))
f.close()

#Create the variables for R and turn the lists to vectors
robjects.globalenv['year'] = robjects.IntVector(years)
robjects.globalenv['temp'] = robjects.FloatVector(temps)
robjects.globalenv['months'] = robjects.FloatVector(months)
dataf = robjects.DataFrame({'year':  robjects.IntVector(years), 'temp': robjects.FloatVector(temps), 'months': robjects.FloatVector(months)})

#Create picture we want to show data
grdevices.png('1950MonthPlot.png', width=800, height=1000, bg="white")

#Plot the actual data year, temp, and months
#label axis
#add best fit lines
pp = ggplot2.ggplot(dataf) + \
     ggplot2.aes_string(x='year', y='temp', col='factor(months)') + \
     ggplot2.geom_point() + \
     ggplot2.stat_smooth(ggplot2.aes_string(group = 'months'),method = 'loess', se =r("FALSE"), size = 2)
#plot it
pp.plot()
grdevices.dev_off()


##### Find individual stations least square values to determine if the station
##### warmer or cooler

#takes a list of years and the temps for that year and returns the correlation
#and pvalue
#positive correlation means getting warmer, negative means getting colder
#pvalue is confidence value, less than .05 is confident
def doLeastSquares(year=[], temps=[]):
	robjects.globalenv['year'] = robjects.IntVector(years)
	robjects.globalenv['temp'] = robjects.FloatVector(temps)
	lm = stats.lm("temp ~ year")
	sm = base.summary(lm)
	pvalue = .5
	corr = lm[0][1]
	return corr, pvalue
	 
lat = long = station = wban = 0
corr = pvalue = 0.0
years = []
temps = []
#File used to create the JS script for website
fco = open('Data/1950corr.txt', 'w')
results = [[],[],[]] #list with corr, lat,long

#to count number of stations
i = 0
neg = pos = goodP = badP = 0
with open('Data/1950years.csv', 'rb') as f:
	reader = csv.reader(f, delimiter='\t')
	for line in reader:
        #if the station or the wban code doesnt exist then go to next line
		if(station != int(line[0]) or wban != int(line[1])):
			if(station != 0):
                #calculate the the station
				corr,pvalue = doLeastSquares(years, temps)
                #the correlation, latitude and longitude of the station added
                #to results list
				results[0].append(corr)
				results[1].append(lat)
				results[2].append(long)
                #write the correlation to the file that will be used for JS
                #script
				fco.write(str(corr) + "\n")
				
                #count number of stations warming or cooling
				if(corr < 0):
					neg += 1
				else:
					pos += 1
                #count number of stations we are confident in
				if(pvalue <= .05):
					goodP += 1
				else:
					badP += 1			        	
			station = int(line[0])
			wban = int(line[1])
			lat = int(line[6])
			long = int(line[7])
			years = [] #reset years and temps
			temps = []
			i += 1
		years.append(int(line[2]))
		temps.append(float(line[3]))
f.close()		
fco.close()	
#print out the stats collected
print "Positive correlation: " + pos
print "Negative correlation: " + neg
print "Confident: " + goodP
print "Not confident" + badP 
